// 이 코드를 Google Apps Script에 복사하여 사용하세요
// 스프레드시트 ID: 1pnqxotkFAZcEBqT3fnywY44XylzV1bO6_TK9p6y6c8c

// 로깅 함수
function logToSheet(message, data) {
  try {
    const spreadsheetId = '1pnqxotkFAZcEBqT3fnywY44XylzV1bO6_TK9p6y6c8c';
    const ss = SpreadsheetApp.openById(spreadsheetId);
    
    // 로그 시트 가져오기 또는 생성
    let logSheet = ss.getSheetByName('로그');
    if (!logSheet) {
      logSheet = ss.insertSheet('로그');
      logSheet.appendRow(['타임스탬프', '메시지', '데이터']);
    }
    
    // 로그 추가
    logSheet.appendRow([
      new Date(),
      message,
      JSON.stringify(data)
    ]);
  } catch (e) {
    // 로깅에 실패하더라도 계속 진행
    console.error('로깅 실패:', e);
  }
}

// GET 요청 처리
function doGet(e) {
  try {
    logToSheet('GET 요청 받음', e.parameter);
    
    // URL 매개변수에서 데이터 가져오기
    const data = e.parameter;
    
    // 테스트 요청인 경우
    if (Object.keys(data).length === 0) {
      return ContentService.createTextOutput(JSON.stringify({
        'result': 'success',
        'message': '서비스가 정상 작동 중입니다.'
      })).setMimeType(ContentService.MimeType.JSON);
    }

    // 데이터 처리
    const result = saveToSheet(data);
    return ContentService.createTextOutput(JSON.stringify(result))
      .setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    logToSheet('GET 요청 오류', error.toString());
    // 오류 발생 시 응답
    return ContentService.createTextOutput(JSON.stringify({
      'result': 'error',
      'message': error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

// POST 요청 처리
function doPost(e) {
  try {
    logToSheet('POST 요청 받음', e.parameter);
    // 넘어온 폼 데이터 가져오기
    const data = e.parameter;
    
    // 데이터 처리
    const result = saveToSheet(data);
    return ContentService.createTextOutput(JSON.stringify(result))
      .setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    logToSheet('POST 요청 오류', error.toString());
    // 오류 발생 시 응답
    return ContentService.createTextOutput(JSON.stringify({
      'result': 'error',
      'message': error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

// 데이터를 시트에 저장하는 함수
function saveToSheet(data) {
  try {
    // 입력 데이터 검증
    if (!data.name || !data.userid || !data.phone) {
      logToSheet('필수 데이터 누락', data);
      return { 
        'result': 'error', 
        'message': '필수 데이터(이름, 아이디, 핸드폰번호)가 누락되었습니다.' 
      };
    }
    
    // 스프레드시트 가져오기
    const spreadsheetId = '1pnqxotkFAZcEBqT3fnywY44XylzV1bO6_TK9p6y6c8c';
    let ss;
    
    try {
      ss = SpreadsheetApp.openById(spreadsheetId);
    } catch (e) {
      logToSheet('스프레드시트 열기 실패', spreadsheetId);
      return { 
        'result': 'error', 
        'message': '스프레드시트를 열 수 없습니다. ID를 확인하세요.' 
      };
    }
    
    // 응답 시트 가져오기 또는 생성
    let sheet = ss.getSheetByName('Form Responses');
    if (!sheet) {
      sheet = ss.getActiveSheet();
      if (!sheet) {
        sheet = ss.insertSheet('Form Responses');
      }
    }
    
    // 첫 번째 데이터인 경우 헤더 추가
    if (sheet.getLastRow() === 0) {
      sheet.appendRow([
        '타임스탬프', 
        '이름', 
        '슈퍼로이어 아이디', 
        '핸드폰번호', 
        '개인정보 동의'
      ]);
    }
    
    // 데이터 정리
    const cleanedData = {
      name: data.name || '',
      userid: data.userid || '',
      phone: data.phone || '',
      agree: data.agree || ''
    };
    
    // 데이터 추가
    sheet.appendRow([
      new Date(), // 타임스탬프는 서버 시간으로 사용
      cleanedData.name,
      cleanedData.userid,
      cleanedData.phone,
      cleanedData.agree
    ]);
    
    logToSheet('데이터 저장 성공', cleanedData);
    
    // 성공 응답 반환
    return {
      'result': 'success',
      'message': '데이터가 성공적으로 저장되었습니다.'
    };
  } catch (error) {
    logToSheet('데이터 저장 오류', error.toString());
    return {
      'result': 'error',
      'message': error.toString()
    };
  }
}

// 웹 앱 배포 방법:
// 1. 스크립트 편집기에서 '배포' > '새 배포' 클릭
// 2. 유형: '웹 앱'
// 3. 실행할 사용자: '나(이메일)' 
// 4. 액세스 권한: '모두(익명 포함)'
// 5. '배포' 클릭 후 URL 복사하여 script.js의 scriptURL 변수에 붙여넣기

// 주의: 
// 1. 배포할 때마다 새로운 URL이 생성됩니다. 항상 최신 URL을 사용하세요.
// 2. 처음 배포 후 권한 승인 화면이 나타납니다. '고급' > '안전하지 않은 앱으로 이동' > '허용'을 클릭하세요. 